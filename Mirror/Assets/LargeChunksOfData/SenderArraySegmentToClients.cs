using Mirror;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UKnack.Mirror;

public class SenderArraySegmentToClients : NetworkBehaviour
{
    private byte[] _data = new byte[100_000_000];
    private uint _dataCount = 0;


    protected Dictionary<int, uint> _clientsConfirmedRecievedDataCount = new Dictionary<int, uint>();


    [Command(requiresAuthority = false)]
    protected void CmdClientRecievedTotal(uint clientDataCount, NetworkConnectionToClient sender = null)
    {
        if (sender == null)
            throw new System.NullReferenceException($"{nameof(sender)} should be generated by Mirror and never be null");

        uint wasConfirmedCount = _clientsConfirmedRecievedDataCount[sender.connectionId];
        if (wasConfirmedCount >= clientDataCount)
            throw new System.Exception($"Client before had already {wasConfirmedCount} but new number should be bigger {clientDataCount}");
        if (clientDataCount > _dataCount)
            throw new System.Exception($"Client can never have more data {clientDataCount} than server {_dataCount}");

        _clientsConfirmedRecievedDataCount[sender.connectionId] = clientDataCount;

        if (clientDataCount < _dataCount)
            SendMoreDataForClient(sender, clientDataCount);
    }

    private void SendMoreDataForClient(NetworkConnectionToClient sender, uint clientDataCount)
    {
        uint needToSendUnchunked = _dataCount - clientDataCount;
        if (needToSendUnchunked == 0)
        {
            throw new System.Exception($"Why this method was called for {sender.connectionId}, data difference is 0");
            //return;
        }

        if (needToSendUnchunked < 0)
            throw new System.Exception($"for client: {sender.connectionId} there is negative number of data that need to be sent: {needToSendUnchunked}, this should never happen");



        throw new NotImplementedException();
    }

    [Command(requiresAuthority = false)]
    protected void CmdCliendConfirmedReceivedDataOnServer(long lastCount, NetworkConnectionToClient sender = null)
    {
        if (IsConnectionFromHost(sender))
            throw new System.Exception($"Host client({sender.connectionId}) should never call this command");

        if (sender == null)
            throw new System.NullReferenceException($"{nameof(sender)} should be generated by Mirror and never be null");

        Debug.Log($"CmdOnServer called from {sender.connectionId}");

        CommandCodeOnServer(sender);
    }

    private void CommandCodeOnServer(NetworkConnectionToClient sender)
    {
        throw new NotImplementedException();
    }

    protected void OnServerWhenClientConnect(NetworkConnectionToClient conn)
    {
        ZeroClient(conn);
    }

    private void ZeroClient(NetworkConnectionToClient conn)
    {
        if (IsConnectionFromHost(conn))
            return;

        _clientsConfirmedRecievedDataCount[conn.connectionId] = 0;
    }

    protected void OnServerWhenClientDisconnect(NetworkConnectionToClient conn)
    {
        _clientsConfirmedRecievedDataCount.Remove(conn.connectionId);
    }

    public override void OnStartServer()
    {
        NetworkManagerCallbacks.OnServerWhenClientConnect += OnServerWhenClientConnect;
        NetworkManagerCallbacks.OnServerWhenClientDisconnect += OnServerWhenClientDisconnect;
        
        
        //_serverRunning = true;
    }

    public override void OnStopServer()
    {
        //if (_serverRunning == false)
        //    return;

        NetworkManagerCallbacks.OnServerWhenClientConnect -= OnServerWhenClientConnect;
        NetworkManagerCallbacks.OnServerWhenClientDisconnect -= OnServerWhenClientDisconnect;
        
        //_serverRunning = false;
    }

    private bool IsConnectionFromHost(NetworkConnectionToClient conn)
    {
        if (conn == null)
            throw new System.ArgumentNullException($"are you trying that null connection is local? Why?");

        LocalConnectionToClient local = NetworkServer.localConnection;
        if (local != null)
        {
            if (conn == local)
            {
                Debug.Log($"Just so you know connection: {conn.connectionId} is local: {local.connectionId}");
                return true;
            }
        }
        return false;
    }

}