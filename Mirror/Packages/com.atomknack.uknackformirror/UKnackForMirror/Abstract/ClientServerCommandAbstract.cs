using Mirror;
using UnityEngine;

namespace UKnack.Mirror
{

    public abstract class ClientServerCommandAbstract : NetworkBehaviour
    {

        private bool _serverRunning = false;
        private bool _clientRunning = false;

        protected abstract void CommandCodeOnServer(NetworkConnectionToClient sender);
        protected abstract void OnClientInitialize();
        protected abstract void OnClientPrepareForDestroy();

        protected abstract void OnServerWhenClientConnect(NetworkConnectionToClient conn);

        protected abstract void OnServerWhenClientDisconnect(NetworkConnectionToClient conn);

        public virtual void CommandOnClient() => CmdOnServer();

        [Command(requiresAuthority = false)]
        protected void CmdOnServer(NetworkConnectionToClient sender = null)
        {
            if (sender == null)
                throw new System.NullReferenceException($"{nameof(sender)} should be generated by Mirror and never be null");

            Debug.Log($"CmdOnServer called from {sender.connectionId}");

            CommandCodeOnServer(sender);
        }

        public override void OnStartServer()
        {
            NetworkManagerCallbacks.OnServerWhenClientConnect += OnServerWhenClientConnect;
            NetworkManagerCallbacks.OnServerWhenClientDisconnect += OnServerWhenClientDisconnect;
            _serverRunning = true;
        }

        public override void OnStopServer()
        {
            if (_serverRunning == false)
                return;

            NetworkManagerCallbacks.OnServerWhenClientConnect -= OnServerWhenClientConnect;
            NetworkManagerCallbacks.OnServerWhenClientDisconnect -= OnServerWhenClientDisconnect;
            _serverRunning = false;
        }

        public override void OnStartClient()
        {
            OnClientInitialize();
            _clientRunning = true;
        }

        public override void OnStopClient()
        {
            if (_clientRunning == false)
                return;

            OnClientPrepareForDestroy();

            _clientRunning = false;
        }

        public void OnDisable()
        {
            OnStopServer();
            OnStopClient();
        }


    }

}